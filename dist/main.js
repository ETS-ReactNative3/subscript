!function(t){var e={};function r(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,s){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(s,n,function(e){return t[e]}.bind(null,n));return s},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);var s=function(t){return Array.isArray(t)},n=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},i=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},o=function(t){return Array.isArray(t)||"object"==typeof t},a=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},c=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!s(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{!function(t,...e){e.forEach(e=>{t.indexOf(e)<0&&t.push(e)})}(r,...Object.getOwnPropertyNames(t))}),r};function h(t,e,r=!1,l=!1,u=!0){var p=0,f=t.shift();if((a(f)||!0===f||!1===f)&&(p=f,f=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,m)=>{(o(t)||n(t))&&(r?c(t):Object.getOwnPropertyNames(t)).forEach(n=>{var o=f[n],c=t[n];if((s(o)&&s(c)||i(o)&&i(c))&&(!0===p||p>0))f[n]=s(o)&&s(c)?[]:{},h([a(p)?p-1:p,f[n],o,c],e,r,l,u);else if(e(n,f,t,m))if(s(f)&&s(t))l?f[n]=c:f.push(c);else try{u?Object.defineProperty(f,n,Object.getOwnPropertyDescriptor(t,n)):f[n]=t[n]}catch(t){}})}),f}var l=function(...t){return h(t,(t,e,r)=>!0,!1,!1,!1)},u=function(t,e,r=!1){for(var s=t.indexOf(e);s>-1&&(r||!1===r);)t.splice(s,1),r>0&&r--,s=t.indexOf(e);return t},p=function(t,e){if(!t)return!1;if(t instanceof e)return!0;var r=t=>{for(;t&&t!==Function.prototype;){if(t===e||t.prototypes&&t.prototypes.reduce((t,s)=>t||s===e||r(s),!1))return!0;t=Object.getPrototypeOf(t)}return!1};return r(t.constructor)},f=function(t){return"number"==typeof t},m=function(t){return i(t)&&Object.getPrototypeOf(t)===Object.prototype},g=function(t){return!0===t||!1===t},v=function(t,e){var r=void 0;return o(t)&&Object.keys(t).forEach((s,n)=>{!1!==r&&(r=e(a(s)?parseFloat(s):s,t[s],n))}),r};const d=function(t,e,r=!0,a=1){if(s(t)&&s(e)&&t.length!==e.length)return!r;if(i(t)&&i(e)){var c=Object.keys(t),h=Object.keys(e);if(!c.length&&!h.length)return m(t)&&m(e)?r:t===e===r;if(!d(c,h))return!r}if(a>0&&(s(t)&&s(e)||i(t)&&i(e))){var l=function(t,e,r=!0,n=!0,a=!1,c=!1){if(s(t)&&s(e)){var h=[],l=!0;return t.forEach(t=>{if(l){var u=!1;v(e,(e,a)=>{(!u||n&&o(t))&&(u=r(t,a),(s(u)&&!u.length||i(u)&&!Object.keys(u).length)&&(u=!1),o(u)&&n&&(t=u))}),o(u)?h.push(n?u:t):g(u)?a&&!u||!a&&u?h.push(t):c&&(l=!1):h.push(u)}}),h}if(i(t)&&i(e)){h={},l=!0;return Object.keys(t).forEach(u=>{if(l){var p=r(t[u],e[u]);(s(p)&&!p.length||i(p)&&!Object.keys(p).length)&&(p=!1),o(p)?h[u]=n?p:t[u]:g(p)?a&&!p||!a&&p?h[u]=t[u]:c&&(l=!1):h[u]=p}}),h}}(t,e,(t,e)=>d(t,e,r,a-1),!1,!1,!0);return s(l)?l.length===t.length&&l.length===e.length:i(l)&&i(t)?Object.keys(l).length===Object.keys(t).length&&Object.keys(l).length===Object.keys(e).length:l}return n(r)?r(t,e):f(t)&&f(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var x=d,y=class{even(t){return!(!i(t)||t.jsenType!==this.jsenType)&&x(t,this)}inherit(t){return this}withComments(t){return this.meta||(this.meta={}),this.meta.comments=t,this}withVars(t){return this.meta||(this.meta={}),this.meta.vars=t,this}};const w=class extends y{};Object.defineProperty(w.prototype,"jsenType",{get:()=>"Reference"});var b=w;const j=class extends y{};Object.defineProperty(j.prototype,"jsenType",{get:()=>"CallExpression"});var O=j;const S=class extends y{};Object.defineProperty(S.prototype,"jsenType",{get:()=>"FunctionType"});var k=S;const E=class{static parse(t,e,r={},n=E){if(r.meta||(r.meta={vars:[],_vars:[]}),t.length){for(var i=Object.values(e||n.grammars),o=0;o<i.length;o++){var a=r.meta&&s(r.meta.vars)?r.meta.vars.length:0,c=i[o].parse(t,(t,e,s={})=>E.parse(t,e,s?l(r,s):r,n));if(c){if(c.meta||(c.meta={}),p(c,k)){var h=r.meta.vars.splice(a);r.meta._vars=r.meta._vars.concat(h),c.meta._vars=h}else c.meta.vars=r.meta.vars.slice(a);(p(c,b)||p(c,O))&&(u(c.meta.vars,c.context),u(r.meta.vars,c.context),r.meta.vars.push(c))}if(c&&s(r.explain)&&r.explain.push(t+" >>-------------\x3e> "+c.jsenType),c)return c}if(!1===r.assert)return;throw new Error("[Syntax error:] "+t)}}};var T=E,C=function(t){return"string"==typeof t},$=function(t){return arguments.length&&(void 0===t||void 0===t)},P=function(t,e=!0){return s(t)?t:!e&&i(t)?[t]:!1!==t&&0!==t&&function(t){return function(t){return null===t||""===t}(t)||$(t)||!1===t||0===t||o(t)&&!Object.keys(t).length}(t)?[]:function(t){return!C(t)&&!$(t.length)}(t)?Array.prototype.slice.call(t):i(t)?Object.values(t):[t]};const _=function(t,e=1,r=!0){return!a(e)||e<=0?t:(!s(t)&&i(t)&&r&&(t=Object.values(t)),s(t)?t.reduce((t,n)=>s(n)||i(n)&&r?t.concat(_(s(n)?n:Object.values(n),e-1,r)):t.concat(n),[]):t)};var A=_,F=function(t,e=1){var r=0;t.forEach(t=>{r++});var s=t.slice(t.length-r,e);return arguments.length>1?s:s[0]},W=function(t,e=1){return arguments.length>1?F(t.slice().reverse(),e).reverse():F(t.slice().reverse())},N=function(t,e=[]){return h([{},t],(t,r,i)=>{if(!n(i[t]))return n(e)?e(t):!s(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)};const q=class{static lex(t,e,r={}){if(!C(t))throw new Error("Argument1 must be a string!");var s=t=>({delims:t.delims.slice(),options:N(t.options),nesting:t.nesting.slice(),maxDepth:t.maxDepth,comments:t.comments.slice(),tokens:t.tokens.slice(),matches:t.matches.slice(),matchesi:N(t.matchesi)});if(q.$cache[t]&&!1!==r.cache)for(var n=0;n<q.$cache[t].length;n++){var i=q.$cache[t][n];if(x(i.delims,e))return s(i)}var o=new q(t,r).lex(e);return!1!==r.cache&&(q.$cache[t]=q.$cache[t]||[],q.$cache[t].push(o)),s(o)}static split(t,e,r){return q.lex(t,e,r).tokens}static match(t,e,r){return q.lex(t,e,r).matches}constructor(t,e){if(!C(t))throw new Error("Lexer requires the first argument to be a string.");this.$str=t,this.$options=e||{},this.$options.blocks||(this.$options.blocks=q.$blocks),this.$options.quotes||(this.$options.quotes=q.$quotes),this.$options.comments||(this.$options.comments=q.$comments)}lex(t,e){var r={delims:P(t),options:l(!0,{},this.$options,e||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+A(r.nesting).join(", "));return r}_evalCharsAt(t,e){if(!(e>=this.$str.length)){var r=1,s={},n={},i={};if(t.openComment||(n=this._testQuotes(t,e)),t.openQuote||(s=this._testComments(t,e)),t.openComment||s.ending)if(t.nesting.length||i.ending)this._push(t,this.$str[e]);else r=(a=s.starting||s.ending||this.$str[e]).length,this._push(t,a,"comments",s.starting);else if(t.openQuote||n.ending)this._push(t,this.$str[e]);else{if(t.options.limit&&t.matches.length===t.options.limit)return this._push(t,this.$str[e]),this._evalCharsAt(t,e+1);i=this._testNesting(t,e);i=this._testNesting(t,e);var o=this._testChars(t.options.stopChars||[],t,e);if(!t.nesting.length&&!1!==o)return t.options.stopChar=o,void(t.options.stopCharForward=this.$str.substr(e));if(t.delims.length)if(t.nesting.length||i.ending){var a;r=(a=i.starting||i.ending||this.$str[e]).length,this._push(t,a)}else{this._push(t,"");var c=this._testChars(t.delims,t,e);if(!1!==c&&(t.matches.push(c),t.matchesi[e]=c,r=c.length||1,!t.options.preserveDelims))return this._evalCharsAt(t,e+(c.length||1));this._push(t,c||this.$str[e])}else 2===t.nesting.length&&i.starting?(t.matches.push(null),this._push(t,i.starting),r=i.starting.length):!t.nesting.length&&i.ending?(this._push(t,i.ending),r=i.ending.length,t.matches.push(null)):this._push(t,this.$str[e])}return this._evalCharsAt(t,e+r)}}_testQuotes(t,e){var r={};return(t.options.quotes||[]).forEach(s=>{this.$str.substr(e,1)===s&&(t.openQuote?s===t.openQuote&&(t.openQuote=!1,r.ending=s):(t.openQuote=s,r.starting=s))}),r}_testComments(t,e){var r={};return(t.options.comments||[]).forEach(s=>{if(t.openComment){if(W(s)===W(t.openComment)){var n=W(s);this.$str.substr(e).startsWith(n)&&(t.openComment=!1,r.ending=n)}}else{var i=F(s);this.$str.substr(e).startsWith(i)&&(t.openComment=s,r.starting=i)}}),r}_testNesting(t,e){var r={};return(t.options.blocks||[]).forEach(s=>{var n=F(s);if(this.$str.substr(e).startsWith(n))t.nesting=t.nesting.concat([s]),r.starting=n;else if(t.nesting.length&&W(s)===W(W(t.nesting))){var i=W(s);this.$str.substr(e).startsWith(i)&&(t.nesting=t.nesting.slice(0,-1),r.ending=i)}}),t.maxDepth=Math.max(t.maxDepth,t.nesting.length),r}_testChars(t,e,r){for(var s=0;s<t.length;s++){var i=t[s];if(n(i)){var o=i(this.$str.substr(0,r),this.$str.substr(r));if(!1!==o)return o}if(e.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+i,!0!==e.options.useRegex?e.options.useRegex:""));if(a)return a[0]}if(!e.options.ci&&this.$str.substr(r,i.length)===i||e.options.ci&&this.$str.substr(r,i.length).toLowerCase()===i.toLowerCase())return i}return!1}_push(t,e,r="tokens",s=!1){var n=t.matches.length;if($(t.tokens[n])&&(t.tokens[n]=""),"comments"===r){t.tokens[n].comments||(t.tokens[n]=new String(t.tokens[n]),t.tokens[n].comments=[]);var i=t.tokens[n].comments.length-(!t.tokens[n].comments.length||s?0:1);t.tokens[n].comments[i]=(t.tokens[n].comments[i]||"")+e}else{var o=t.tokens[n].comments;t.tokens[n]=new String(t.tokens[n]+e),t.tokens[n].comments=o}}split(t,e,r){return this.lex(e,r).tokens}match(t,e,r){return this.lex(e,r).matches}regParse(t,e){return this.lex(t,l({useRegex:!0},e||{}))}regSplit(t,e){return this.regParse(t,e).tokens}regMatch(t,e){return this.regParse(t,e).matches}};q.$blocks=[["(",")"],["[","]"],["{","}"]],q.$quotes=['"',"'","`"],q.$comments=[["/*","*/"],["//","\n"]],q.$cache={};var I=q;class M{constructor(t,e=null,r={},s={}){this.mainContext=t,this.superContext=e?M.create(e):null,this.localContext=r,this.localContextMeta=s}handle(t,e,r,s=0){var n=()=>e(this.mainContext,null,()=>this.superContext?this.superContext.handle(t,e,r,s+1):r?r():void 0,s);return"toString"===t&&this.localContext.toString===Object.prototype.toString?n():e(this.localContext,this.localContextMeta,n,s)}get(t,e={},r=!0){return t instanceof String&&(t+=""),this.handle(t,(s,i,o,a)=>{var c=D(s,t,e);return!$(c)||R(s,t,e)?n(c)&&r?c.bind(s):c:o()})}set(t,e,r={},s=!1){t instanceof String&&(t+="");const n=(t,e,r,s)=>s.set?s.set(t,e,r):(t[e]=r,!0);return this.handle(!!s||t,(i,o,a)=>{if(o&&"const"===o[t])throw new Error("CONST "+t+"cannot be modified!");if(s){if(!["var","let","const"].includes(s))throw new Error("Unrecognized declarator: "+s+"!");return o[t]=s,n(i,t,e,r)}return R(i,t,r)?n(i,t,e,r):a()},()=>{throw new Error('"'+t+'" is undefined!')})}del(t,e={}){return t instanceof String&&(t+=""),this.handle(t,(r,s,n)=>R(r,t,e)?e.deleteProperty||e.del?(e.deleteProperty||e.del)(r,t):(delete r[t],!0):n())}has(t,e,r={}){return t instanceof String&&(t+=""),e instanceof String&&(e+=""),this.handle(t,(s,n,i)=>{if(R(s,t,r)){var o=D(s,t,r);return R(o,e,r)}return i()},()=>{throw new Error('"'+t+'" is undefined!')})}exec(t,e,r={}){return t instanceof String&&(t+=""),this.handle(t,(s,i,o)=>{var a=D(s,t,r);if(!$(a)||R(s,t,r)){if(!n(a)){if(r.exec)return r.exec(s,t,e);throw new Error('"'+t+'" is not a function! (Called on type: '+typeof s+".)")}return r.apply?r.apply(a,s,e):a.apply(s,e)}return o()},()=>{if(r.execUnknown)return r.execUnknown(this,t,e);throw new Error('"'+t+'()" is undefined!')})}static create(t){return t instanceof M?t:new M(t)}}const D=(t,e,r)=>r.get?r.get(t,e):o(t)&&t||C(t)||f(t)?t[e]:void 0,R=(t,e,r)=>r.has?r.has(t,e):o(t)&&t?e in t:!$(t[e]);var U=function(t,e,r){return t.startsWith(e)&&t.endsWith(r)},Q=function(t,e,r=!1){if(""==e)return t;var s=r?t.lastIndexOf(e):t.indexOf(e);return-1===s?"":t.substr(s+e.length)},B=function(t,e,r=!1){if(""==e)return t;var s=r?t.lastIndexOf(e):t.indexOf(e);return-1===s?t:t.substr(0,s)},L=function(t,e,r){return function(t,e){return B(t,e,!0)}(Q(t,e),r)};const K=class extends y{};Object.defineProperty(K.prototype,"jsenType",{get:()=>"Abstraction"});var z=K;const J=class extends z{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr.eval(t,e)}toString(t=null){return"("+this.expr.toString(t)+")"}static parse(t,e,r=J){if(U(t,"(",")")&&!I.match(t,[" "]).length)return new r(e(L(t,"(",")")))}};var V=J;const G=class extends y{};Object.defineProperty(G.prototype,"jsenType",{get:()=>"ArrayType"});var H=G;const X=class extends H{constructor(t){super(),this.exprs=t||[]}inherit(t){if(t instanceof H){var e=t.exprs.filter(t=>this.exprs.reduce((e,r)=>e&&!t.even(r),!0));this.exprs=e.concat(this.exprs)}return this}eval(t=null,e={}){return this.exprs.map(r=>r.eval(t,e))}toString(t=null){return"["+this.exprs.map(e=>e.toString(t)).join(", ")+"]"}static parse(t,e,r=X){if(U(t,"[","]")&&!I.match(t.trim(),[" "]).length)return new r(I.split(L(t,"[","]"),[","]).map(t=>t.trim()).filter(t=>t).map(t=>e(t)))}};var Y=X;const Z=class extends y{};Object.defineProperty(Z.prototype,"jsenType",{get:()=>"Arguments"});var tt=Z;const et=class extends tt{constructor(t=[]){super(),this.list=t}eval(t=null,e={}){return this.list.map(r=>r.eval(t,e))}toString(t=null){return"("+this.list.map(e=>e.toString(t)).join(", ")+")"}static parse(t,e,r=et){if(t=t.trim(),U(t,"(",")")&&!I.match(t,[" "]).length)return new r(I.split(L(t,"(",")"),[","]).map(t=>e(t.trim())))}};var rt=et,st=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)};const nt=class extends y{};Object.defineProperty(nt.prototype,"jsenType",{get:()=>"AssertionExpression"});var it=nt;const ot=class extends it{constructor(t,e){super(),this.exprs=t,this.logic=e}eval(t=null,e={}){if("!"===this.logic)return!F(this.exprs).eval(t,e);A(ot.operators);for(var r=(this.logic||"").trim().toUpperCase(),s=r===(ot.operators.or||"").trim().toUpperCase(),n=r===(ot.operators.nor||"").trim().toUpperCase(),i=r===(ot.operators.and||"").trim().toUpperCase(),o=r===(ot.operators.nand||"").trim().toUpperCase(),a=!0,c=0,h=0;h<this.exprs.length;h++){if(a=this.exprs[h].eval(t,e),i&&!a)return!1;if(o&&!a)return!0;if(s&&a)return a;c+=a?1:0}return s?a:i||o?i:n&&0===c}toString(t=null){return"!"===this.logic?"!"+F(this.exprs).toString(t):this.exprs.map(e=>e.toString(t)).join(" "+this.logic+" ")}static parse(t,e,r=ot){if(t.startsWith("!"))return new r([e(t.substr(1))],"!");var s=I.lex(t,A(r.operators));if(s.tokens.length>1){var n=st(s.matches);if(n.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+t+"!");return new r(s.tokens.map(t=>e(t.trim())),F(n))}}};ot.operators={and:"&&",or:"||"};var at=ot;const ct=class extends y{};Object.defineProperty(ct.prototype,"jsenType",{get:()=>"AssignmentExpression"});var ht=ct;const lt=class extends ht{constructor(t,e,r,s="="){super(),this.initKeyword=t,this.reference=e,this.val=r,this.operator=s}eval(t=null,e={}){var r=this.reference.getEval(t,e),s=this.val.eval(t,e);if(!$(r.context)&&!$(r.name))return M.create(r.context).set(r.name,s,e,this.initKeyword);throw new Error('"'+this+'" is undefined!')}toString(t=null){return(this.initKeyword?this.initKeyword+" ":"")+[this.reference.toString(t),this.operator,this.val.toString(t)].join(" ")}static parse(t,e,r=lt){var s=I.lex(t,r.operators);if(2===s.tokens.length){var n,i=s.tokens.shift().trim(),o=s.tokens.shift().trim();if(["var","let","const"].includes(B(i," "))&&(n=B(i," "),i=Q(i," ").trim()),!((i=e(i))instanceof b&&(o=e(o))))throw new Error("Invalid assignment expression: "+t);return new r(n,i,o,s.matches[0].trim())}}};lt.operators=[" = "];var ut=lt;const pt=class extends y{};Object.defineProperty(pt.prototype,"jsenType",{get:()=>"BooleanType"});var ft=pt;const mt=class extends ft{constructor(t){super(),this.state=t}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(t,e,r=mt){if("true"===(t=t.toLowerCase().trim())||"false"===t)return new r(t)}};var gt=mt;const vt=class extends O{constructor(t,e){super(),this.reference=t,this.args=e}eval(t=null,e={}){var r=this.reference.getEval(t,e),s=this.args.eval(t,e);if(!$(r.context)&&!$(r.name))return M.create(r.context).exec(r.name,s,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return this.reference.toString(t)+this.args.toString(t)}static parse(t,e,r=vt){if(!t.startsWith("(")&&t.endsWith(")")&&!I.match(t,[" "]).length){var s,n=I.split(t,[]),i=n.pop();if(!((s=e(n.join("")))instanceof b&&(i=e(i,[rt]))))throw new Error("Invalid call directive: "+t);return new r(s,i)}}};var dt=vt;const xt=class extends y{};Object.defineProperty(xt.prototype,"jsenType",{get:()=>"ComparisonExpression"});var yt=xt;const wt=class extends yt{constructor(t,e,r){super(),this.operand1=t,this.operand2=e,this.operator=r}eval(t=null,e={}){return wt.compare(this.operand1.eval(t,e),this.operand2.eval(t,e),this.operator)}toString(t=null){return[this.operand1.toString(t),this.operator,this.operand2.toString(t)].join(" ")}static parse(t,e,r=wt){var s=A(r.operators).map(t=>" "+t+" "),n=I.lex(t,s);if(n.tokens.length>1){if(n.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+t+"!");return new r(e(F(n.tokens).trim()),e(W(n.tokens).trim()),n.matches[0].trim())}}static compare(t,e,r="=="){if(-1===A(wt.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return t===e;case"==":case"=":return t==e;case">":return t>e;case"<":return t<e;case">=":return t>=e;case"<=":return t<=e;case"!=":return t!=e;case"!==":return t!==e;case"^=":return C(t)&&t.startsWith(e);case"$=":return C(t)&&t.endsWith(e);case"*=":return!(!s(e)&&!C(e))&&t.indexOf(e)>-1;case"~=":return C(t)&&C(e)&&(" "+t+" ").indexOf(" "+e+" ")>-1;case">=<":if(!s(e)||2!==e.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return t>=e[0]&&t<=e[1];case"/**/":return e.match(new RegExp(t));default:return!1}}static diff(t,e,r){return!wt.compare(t,e,r?"===":"==")}};wt.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var bt=wt;const jt=class extends y{};Object.defineProperty(jt.prototype,"jsenType",{get:()=>"TernaryConditional"});var Ot=jt;const St=class extends Ot{constructor(t,e,r){super(),this.assertion=t,this.onTrue=e,this.onFalse=r}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue.eval(t,e):this.onFalse.eval(t,e)}toString(t=null){return[this.assertion.toString(t),St.operators[0],this.onTrue.toString(t),St.operators[1],this.onFalse.toString(t)].join(" ")}static parse(t,e,r=St){var s=I.split(t,r.operators);if(s.length>1){if(2===s.length)throw new Error("Malformed ternary expression: "+t+"!");return new r(e(s[0].trim()),e(s[1].trim()),e(s[2].trim()))}}};St.operators=["?",":"];var kt=St;const Et=class extends y{};Object.defineProperty(Et.prototype,"jsenType",{get:()=>"DeleteExpression"});var Tt=Et;const Ct=class extends Tt{constructor(t,e="delete"){super(),this.reference=t,this.operator=e}eval(t=null,e={}){var r=this.reference.getEval(t,e);if(!$(r.context)&&!$(r.name))return M.create(r.context).del(r.name,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return this.operator+" "+this.reference.toString(t)}static parse(t,e,r=Ct){var s=I.lex(t,Object.values(r.operators));if(1===s.matches.length&&t.startsWith(s.matches[0]+" ")){var n;if(!((n=e(s.tokens.pop().trim()))instanceof b))throw new Error("Invalid delete directive: "+t);return new r(n,s.matches[0].trim())}}};Ct.operators={red:"reduce",del:"delete"};var $t=Ct;const Pt=class extends y{};Object.defineProperty(Pt.prototype,"jsenType",{get:()=>"Statements"});var _t=Pt;const At=class extends y{};Object.defineProperty(At.prototype,"jsenType",{get:()=>"ReturnDirective"});var Ft=At;const Wt=class extends _t{constructor(t,e){super(),this.stmts=t||[],this.delim=e}eval(t=null,e={}){t=M.create(t);for(var r=[],s=0;s<this.stmts.length;s++){if(this.stmts[s]instanceof Ft)return this.stmts[s].eval(t,e);r[s]=this.stmts[s].eval(t,e)}return r}toString(t=null){return this.stmts.map(e=>e.toString(t)).join(this.delim)}static parse(t,e,r=Wt){var s=I.lex(t,A(r.operators).concat([(t,e)=>!(!t.endsWith("}")||e.trim().startsWith("else"))&&""]));if(s.matches.length)return new r(s.tokens.map(t=>e(t.trim())).filter(t=>t),s.matches[0].trim())}};Wt.operators=[";","\r\n"];var Nt=Wt;const qt=class extends k{constructor(t,e,r={}){super(),this.paramters=t||{},this.statements=e,this.arrowFunctionFormatting=r}inherit(t){if(t instanceof k){for(var e=Object.keys(t.paramters),r=Object.keys(this.paramters),s=0;s<Math.max(r.length,e.length);s++){var n=e[s],i=r[s];if(!i&&n)throw new Error("Parameter #"+s+" ("+n+") in parent function must be implemented.");if(i&&n){var o=t.paramters[n],a=this.paramters[i];if(a&&!o)throw new Error("Parameter #"+s+" ("+i+") must not have a default value as established in parent function.");if(a&&o&&a.jsenType!==o.jsenType)throw new Error("Default value for parameter #"+s+" ("+i+") must be of type "+o.jsenType+" as established in parent function.")}}this.sup=t}return this}eval(t=null,e={}){return(...r)=>{var s={};v(Object.keys(this.paramters),(n,i)=>{var o=this.paramters[i];if(r.length-1<n&&!o)throw new Error('The parameter "'+i+'" is required.');s[i]=r.length>n?r[n]:this.paramters[i]?this.paramters[i].eval(t,e):null});var n=new M(s,t);return this.statements.eval(n,e)}}toString(t=null){var e=[];if(v(this.paramters,(r,s)=>{e.push(r+(s?"="+s.toString(t):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===e.length&&-1===e[0].indexOf("="),s=!1===this.arrowFunctionFormatting.body;return(r?e[0]:"("+e.join(", ")+")")+" => "+(s?this.statements.toString(t):"{"+this.statements.toString(t)+"}")}return"function ("+e.join(", ")+") {"+this.statements.toString(t)+"}"}static parse(t,e,r=qt){var s;if((t=t.trim()).startsWith("function")&&(s=I.split(t,[]).slice(1).filter(t=>t.trim()))&&2===s.length)var n=!1,i=L(s.shift().trim(),"(",")"),o=L(s.shift().trim(),"{","}");else{if(t.startsWith("function")||!(s=I.split(t,["=>"]))||2!==s.length)return;i=s.shift().trim(),o=s.shift().trim(),n={};U(i,"(",")")?i=L(i,"(",")"):n.head=!1,U(o,"{","}")?o=L(o,"{","}"):n.body=!1}var a={};I.split(i,[","]).forEach(t=>{var r=t.split("=");r[1]?a[r[0].trim()]=e(r[1].trim()):a[t.trim()]=null});var c=e(o,[Nt],{assert:!1})||e(o);return new r(a,c,n)}};qt.operators=["=>"];var It=qt;const Mt=class extends y{};Object.defineProperty(Mt.prototype,"jsenType",{get:()=>"IfConditional"});var Dt=Mt;const Rt=class extends Dt{constructor(t,e,r,s={}){super(),this.assertion=t,this.onTrue=e,this.onFalse=r,this.params=s}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue?this.onTrue.eval(t,e):void 0:this.onFalse?this.onFalse.eval(t,e):void 0}toString(t=null){var e=this.params.onTrueIsBlock?"{"+this.onTrue.toString(t)+"}":this.onTrue?this.onTrue.toString(t):"",r=this.params.onFalseIsBlock?"{"+this.onFalse.toString(t)+"}":this.onFalse?this.onFalse.toString(t):"";return"if ("+this.assertion.toString(t)+")"+e+(r?" else "+r:"")}static parse(t,e,r=Rt){var s;if((t=t.trim()).startsWith("if")&&(s=I.split(t,[],{limit:2}).slice(1).filter(t=>t.trim()))&&2===s.length){var n,i,o=e(L(s.shift().trim(),"(",")").trim()),a=I.split(s.shift().trim(),["else"],{limit:1}),c=a.shift().trim(),h=(a.shift()||"").trim();return U(c,"{","}")?(n=!0,c=e(c=L(c,"{","}").trim(),[Nt],{assert:!1})||e(c)):c=e(c),h&&(U(h,"{","}")?(i=!0,h=e(h=L(h,"{","}").trim(),[Nt],{assert:!1})||e(h)):h=e(h)),new r(o,c,h,{onTrueIsBlock:n,onFalseIsBlock:i})}}};var Ut=Rt,Qt=function(t,e,r=null){return s(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]};const Bt=class extends y{};Object.defineProperty(Bt.prototype,"jsenType",{get:()=>"MathExpression"});var Lt=Bt;const Kt=class extends Lt{constructor(t,e){super(),this.val=t,this.exprs=e}eval(t=null,e={}){return this.exprs.reduce((r,s)=>{var n=s.val.eval(t,e),i=s.operator.trim();if(!(a(r)&&a(n)||"+"===i))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(i){case"+":return r+n;case"-":return r-n;case"*":return r*n;case"/":return r/n}},this.val.eval(t,e))}toString(t=null){return[this.val.toString(t)].concat(this.exprs.map(e=>e.operator+" "+e.val.toString(t))).join(" ")}static parse(t,e,r=Kt){var s=I.lex(t,A(r.operators));if(s.tokens.length>1&&s.matches.length===s.tokens.length-1){var n=st(s.matches);if(Qt(n,Kt.operators.sup).length&&Qt(n,Kt.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+t+"!");return new r(e(s.tokens.shift().trim()),s.tokens.map((t,r)=>({operator:s.matches[r],val:e(t.trim())})))}}};Kt.operators={sup:["*","/"],sub:[" + "," - "]};var zt=Kt;const Jt=class extends y{};Object.defineProperty(Jt.prototype,"jsenType",{get:()=>"NumberType"});var Vt=Jt;const Gt=class extends Vt{constructor(t,e=0){super(),this.int=t,this.dec=e}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(t=null){return this.int+(this.dec?"."+this.dec:null)}static parse(t,e,r=Gt){if(a(t)){t=t.split(".");return new r(parseInt(t.shift()),parseInt(t.shift()))}}};var Ht=Gt;const Xt=class extends y{};Object.defineProperty(Xt.prototype,"jsenType",{get:()=>"ObjectType"});var Yt=Xt;const Zt=class extends Yt{constructor(t){super(),this.entries=t||{}}inherit(t){return t instanceof Yt&&v(t.entries,(t,e)=>{t in this.entries||(this.entries[t]=e)}),this}eval(t=null,e={}){var r={};return v(this.entries,(s,n)=>{r[s]=n.eval(t,e)}),r}toString(t=null){var e=[];return v(this.entries,(r,s)=>{e.push(r+Zt.operators.sub+s.toString(t))}),"{"+e.join(Zt.operators.sup)+"}"}static parse(t,e,r=Zt){if(U(t,"{","}")&&!I.match(t.trim(),[" "]).length){var s={},n=I.split(L(t,"{","}"),[Zt.operators.sup]).map(t=>t.trim()).filter(t=>t);return v(n,(t,r)=>{var n=I.split(r,[Zt.operators.sub],{limit:1});s[F(n).trim()]=e(W(n).trim())}),new r(s)}}};Zt.operators={sup:",",sub:":"};var te=Zt;const ee=class extends y{};Object.defineProperty(ee.prototype,"jsenType",{get:()=>"PresenceOperator"});var re=ee;const se=class extends re{constructor(t,e,r="in"){super(),this.prop=t,this.reference=e,this.operator=r}eval(t=null,e={}){var r=this.reference.getEval(t,e),s=this.prop.eval(t,e);if(!$(r.context)&&!$(r.name))return M.create(r.context).has(r.name,s,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return[this.prop.toString(t),this.operator,this.reference.toString(t)].join(" ")}static parse(t,e,r=se){var s=I.lex(t,r.operators);if(2===s.tokens.length){var n,i;if(!((n=e(s.tokens.shift().trim()))&&(i=e(s.tokens.shift().trim()))instanceof b))throw new Error("Invalid presence check expression: "+t);return new r(n,i,s.matches[0].trim())}}};se.operators=[" in "];var ne=se;const ie=class extends b{constructor(t,e,r=!1){super(),this.context=t,this.name=e,this.backticks=r}getEval(t=null,e={}){var r=t,s=this.name;return this.context&&(s instanceof y&&(s=s.eval(t,e)),r=this.context.eval(t,e)),{context:r,name:s}}eval(t=null,e={}){var r=this.getEval(t,e);if(!$(r.context)&&!$(r.name))return M.create(r.context).get(r.name,e)}toString(t=null){var e=this.name;if(this.context){var r=this.context.toString(t);e instanceof y?e="["+e.toString(t)+"]":this.backticks&&(e="`"+e+"`")}else{r=t;this.backticks&&(e="`"+e+"`")}return(r||"")+(r&&!e.startsWith("[")?ie.separator:"")+e}static parse(t,e,r=ie){if(!I.match(t.trim(),[" "]).length){var s,n,i=I.split(t,[]),o=i.pop(),a=I.split(o.trim(),[r.separator],{preserveDelims:!0});if(a.length>1&&(o=a.pop().substr(1),i=i.concat(a)),U(o,"`","`")&&(o=L(o,"`","`"),n=!0),i.length&&((s=e(i.join(""))).isContext=!0),U(o,"[","]")){if(!s)throw new Error("Invalid reference: "+t+"!");o=e(L(o,"[","]"))}return new r(s,o,n)}}};ie.separator=".";var oe=ie;const ae=class extends Ft{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr?this.expr.eval(t,e):void 0}toString(t=null){return this.expr?"return "+this.expr.toString(t):"return"}static parse(t,e,r=ae){var s=t.toLowerCase();if(s.startsWith("return ")||"return"===s)return new r(e(t.substr(6).trim()))}};var ce=ae;const he=class extends y{};Object.defineProperty(he.prototype,"jsenType",{get:()=>"StringType"});var le=he;const ue=class extends le{constructor(t,e){super(),this.expr=t,this.quote=e}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(t,e,r=ue){if(t=t.trim(),(U(t,'"','"')||U(t,"'","'"))&&!I.match(t,[" "]).length){var s=U(t,'"','"')?'"':"'";return new r(L(t,s,s),s)}}};var pe=ue;T.grammars={If:Ut,Return:ce,Deletion:$t,Assignment:ut,Presence:ne,Func:It,Abstraction:V,Condition:kt,Assertion:at,Comparison:bt,Math:zt,Arr:Y,Obj:te,Num:Ht,Str:pe,Bool:gt,Call:dt,Reference:oe};var fe=T;window.WebNative||(window.WebNative={}),window.WebNative.Jsen=fe}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,