{"version":3,"file":"inspector.js","mappings":"mBAIA,QAAeA,GAAW,cAAmBA,EAEzCC,cACIC,QACAC,KAAKC,aAAc,CAAEC,KAAM,SAG/BC,oBACI,GAAGC,OAAQJ,KAAKK,KAAMC,SAASD,IAC3B,GAAKA,EAAIE,SAAU,MAASF,EAAIE,SAAU,MAASF,EAAIE,SAAU,KAC5CP,KAAKQ,WAAWC,YAAaC,SAASC,cAAe,UAC3DC,YAAcP,MACtB,CACH,IAAIQ,EAAab,KAAKQ,WAAWC,YAAaC,SAASC,cAAe,SACtEE,EAAWC,aAAc,MAAO,cAChCD,EAAWC,aAAc,OAAQT,OAWxCA,UACD,MAAO,KCtBA,MAAMU,UAAkBC,EAAMC,cAEzCd,oBACIH,KAAKkB,aAAeR,SAASC,cAAe,QAE5CX,KAAKQ,WAAWW,OAAQnB,KAAKkB,cAE7BnB,MAAMI,oBACNH,KAAKkB,aAAaE,iBAAkB,cAAc,KAC9CC,YAAY,KACR,IAAIC,EAAmBtB,KAAKkB,aAAaK,gBAAgBC,QAAQ,CAAEC,EAAmBC,IAAUD,IAAuBC,EAAKC,4BAA4BC,IAAMF,EAAO,OAAO,MACvKJ,GACDtB,KAAK6B,eAAgBP,KAE1B,MAIXO,eAAgBP,GACPtB,KAAK8B,iBACN9B,KAAK8B,eAAeC,SACpB/B,KAAKgC,gBAAgBD,UAEzB/B,KAAK8B,eAAiBpB,SAASC,cAAe,qBAC9CX,KAAKgC,gBAAkBtB,SAASC,cAAe,OAC/CX,KAAKgC,gBAAgBC,UAAUC,IAAK,oBAEpClC,KAAKQ,WAAWW,OAAQnB,KAAK8B,eAAgB9B,KAAKgC,iBAElDhC,KAAKmC,QAAU,GACfb,EAAiBK,iBAAiBrB,SAAS,CAAE8B,EAAmBC,KAC5D,IAAIC,EAAsB,iBAAPD,EAAkB,IAAKA,OAAW,GAAIA,MACzDrC,KAAKmC,QAASE,GAAOrC,KAAKgC,gBAAgBvB,YAAaC,SAASC,cAAe,WAC/EX,KAAKmC,QAASE,GAAKvB,aAAc,YAAauB,GAC9CrC,KAAKmC,QAASE,GAAKvB,aAAc,QAAUwB,GACzBtC,KAAKmC,QAASE,GAAK5B,YAAaC,SAASC,cAAe,SAC9DQ,OAAQ,IAAMmB,GAC1B,IAAIC,EAAcvC,KAAKmC,QAASE,GAAK5B,YAAaC,SAASC,cAAe,OACxDX,KAAKwC,aAAc,eAAkB,gBAC3CC,MAAO,KAAMC,KAAKC,GAAOA,EAAIC,SAAStC,SAASqC,GAAOJ,EAAYN,UAAUC,IAAKS,KAC7F3C,KAAKmC,QAASE,GAAKjB,iBAAkB,SAASyB,IACrC7C,KAAK8C,QACN9C,KAAK8C,OAAOb,UAAUF,OAAQ,UAElC/B,KAAK8C,OAAS9C,KAAKmC,QAASE,GAC5BrC,KAAK8C,OAAOb,UAAUC,IAAK,UAC3BlC,KAAK+C,gBAAiBX,SAKlCW,gBAAiBX,GACb,GAAMA,EAaNpC,KAAK8B,eAAekB,KAAMZ,OAb1B,CACI,IAAIa,EAAUC,OAAOC,KAAMnD,KAAKmC,SAChC,GAAKc,EAAQG,OAAS,CAClB,IAAIC,EAAcrD,KAAKmC,QAASc,EAAS,IACrCK,EAAQ,IAAIC,WAAY,QAAS,CACjCC,KAAMC,OACNC,SAAS,EACTC,YAAY,IAEhBN,EAAYO,cAAeN,KAalCjD,UACD,MAAO,CACH,8EACA,i+BAoCZwD,eAAeC,OAAQ,sBAAuB/C,I","sources":["webpack://@webqit/subscript/./src/console/Base.js","webpack://@webqit/subscript/./src/console/Inspector.js"],"sourcesContent":["\n/**\n * @Console2\n */\nexport default Element => class Base extends Element {\n\n    constructor() {\n        super();\n        this.attachShadow( { mode: 'open' } );\n    }\n\n    connectedCallback() {\n        [].concat( this.css ).forEach( css => {\n            if ( css.includes( '{' ) && css.includes( ':' ) && css.includes( ';' ) ) {\n                let cssElement = this.shadowRoot.appendChild( document.createElement( 'style' ) );\n                cssElement.textContent = css;\n            } else {\n                let cssElement = this.shadowRoot.appendChild( document.createElement( 'link' ) );\n                cssElement.setAttribute( 'rel', 'stylesheet' );\n                cssElement.setAttribute( 'href', css );\n            }\n        } );\n    }\n\n    /**\n     * ----------\n     *  CSS\n     * ----------\n     */\n\n     get css() {\n        return []\n    }\n\n}","\n/**\n * @imports\n */\nimport Base from './Base.js';\n\n/**\n * @Console2\n */\nexport default class Inspector extends Base( HTMLElement ) {\n\n    connectedCallback() {\n        this._contentSlot = document.createElement( 'slot' );\n        // ----------------\n        this.shadowRoot.append( this._contentSlot );\n        // ----------------\n        super.connectedCallback();\n        this._contentSlot.addEventListener( 'slotchange', () => {\n            setTimeout( () => { // Allow embedded script in slotted elements to manifest\n                let subscriptElement = this._contentSlot.assignedNodes().reduce( ( _subscriptElement, node ) => _subscriptElement || ( node.subscriptConsole instanceof Map ? node : null), null );\n                if ( subscriptElement ) {\n                    this.inspectElement( subscriptElement );\n                }\n            }, 0 );\n        } );\n    }\n\n    inspectElement( subscriptElement ) {\n        if ( this.consoleElement ) {\n            this.consoleElement.remove();\n            this.controlsElement.remove();\n        }\n        this.consoleElement = document.createElement( 'subscript-console' );\n        this.controlsElement = document.createElement( 'div' );\n        this.controlsElement.classList.add( 'controls-element' );\n        // ----------------\n        this.shadowRoot.append( this.consoleElement, this.controlsElement );\n        // ----------------\n        this.buttons = {};\n        subscriptElement.subscriptConsole.forEach( ( subscriptFunction, id ) => {\n            let title = typeof id === 'number' ? `<${ id }>()` : `${ id }()`;\n            this.buttons[ id ] = this.controlsElement.appendChild( document.createElement( 'button' ) );\n            this.buttons[ id ].setAttribute( 'script-id', id );\n            this.buttons[ id ].setAttribute( 'title',  title );\n            let textElement = this.buttons[ id ].appendChild( document.createElement( 'span' ) );\n            textElement.append( ' ',  title );\n            let iconElement = this.buttons[ id ].appendChild( document.createElement( 'i' ) );\n            let iconClasses = this.getAttribute( `data-icons` ) || `bi bi-braces`;\n            iconClasses.split( ' ' ).map( str => str.trim() ).forEach( str => iconElement.classList.add( str ) );\n            this.buttons[ id ].addEventListener( 'click', e => {\n                if ( this.active ) {\n                    this.active.classList.remove( 'active' );\n                }\n                this.active = this.buttons[ id ];\n                this.active.classList.add( 'active' );\n                this.inspectFunction( subscriptFunction );\n            } );\n        } );\n    }\n\n    inspectFunction( subscriptFunction ) {\n        if ( !subscriptFunction ) {\n            let buttins = Object.keys( this.buttons );\n            if ( buttins.length ) {\n                let firstButton = this.buttons[ buttins[ 0 ] ];\n                let event = new MouseEvent( 'click', {\n                    view: window,\n                    bubbles: true,\n                    cancelable: true\n                } );\n                firstButton.dispatchEvent( event );\n            }\n            return;\n        };\n        this.consoleElement.bind( subscriptFunction );\n    }\n\n    /**\n     * ----------\n     *  CSS\n     * ----------\n     */\n\n     get css() {\n        return [\n            `https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css`,\n            `\n            * {\n                -webkit-box-sizing: border-box;\n                -moz-box-sizing: border-box;\n                box-sizing: border-box;\n            }\n            :host {\n                position: relative;\n                display: block;\n                background-color: rgb(75, 75, 75);\n            }\n            .controls-element {\n                position: relative;\n                z-index: 10;\n            }\n            .controls-element button {\n                display: inline-flex;\n                align-items: center;\n                background-color: transparent;\n                padding: 0.5rem 1rem;\n                border: none;\n                color: silver;\n            }\n            .controls-element button:is(:hover, .active) {\n                background-color: dimgray;\n                color: gainsboro;\n            }\n            .controls-element button .bi {\n                margin-left: 0.5rem;\n            }\n            `,\n        ]\n    }\n\n}\n\ncustomElements.define( 'subscript-inspector', Inspector );\n"],"names":["Element","constructor","super","this","attachShadow","mode","connectedCallback","concat","css","forEach","includes","shadowRoot","appendChild","document","createElement","textContent","cssElement","setAttribute","Inspector","Base","HTMLElement","_contentSlot","append","addEventListener","setTimeout","subscriptElement","assignedNodes","reduce","_subscriptElement","node","subscriptConsole","Map","inspectElement","consoleElement","remove","controlsElement","classList","add","buttons","subscriptFunction","id","title","iconElement","getAttribute","split","map","str","trim","e","active","inspectFunction","bind","buttins","Object","keys","length","firstButton","event","MouseEvent","view","window","bubbles","cancelable","dispatchEvent","customElements","define"],"sourceRoot":""}