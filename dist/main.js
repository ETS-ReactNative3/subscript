!function(t){var e={};function r(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,s){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(s,n,function(e){return t[e]}.bind(null,n));return s},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);var s=function(t){return Array.isArray(t)},n=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},i=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},o=function(t){return Array.isArray(t)||"object"==typeof t},a=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},h=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!s(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{!function(t,...e){e.forEach(e=>{t.indexOf(e)<0&&t.push(e)})}(r,...Object.getOwnPropertyNames(t))}),r};function c(t,e,r=!1,l=!1,u=!0){var p=0,f=t.shift();if((a(f)||!0===f||!1===f)&&(p=f,f=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,m)=>{(o(t)||n(t))&&(r?h(t):Object.getOwnPropertyNames(t)).forEach(n=>{var o=f[n],h=t[n];if((s(o)&&s(h)||i(o)&&i(h))&&(!0===p||p>0))f[n]=s(o)&&s(h)?[]:{},c([a(p)?p-1:p,f[n],o,h],e,r,l,u);else if(e(n,f,t,m))if(s(f)&&s(t))l?f[n]=h:f.push(h);else try{u?Object.defineProperty(f,n,Object.getOwnPropertyDescriptor(t,n)):f[n]=t[n]}catch(t){}})}),f}var l=function(...t){return c(t,(t,e,r)=>!0,!1,!1,!1)},u=function(t,e,r=!1){for(var s=t.indexOf(e);s>-1&&(r||!1===r);)t.splice(s,1),r>0&&r--,s=t.indexOf(e);return t},p=function(t,e){if(!t)return!1;if(t instanceof e)return!0;var r=t=>{for(;t&&t!==Function.prototype;){if(t===e||t.prototypes&&t.prototypes.reduce((t,s)=>t||s===e||r(s),!1))return!0;t=Object.getPrototypeOf(t)}return!1};return r(t.constructor)},f=function(t){return"number"==typeof t},m=function(t){return i(t)&&Object.getPrototypeOf(t)===Object.prototype},g=function(t){return!0===t||!1===t},v=function(t,e){var r=void 0;return o(t)&&Object.keys(t).forEach((s,n)=>{!1!==r&&(r=e(a(s)?parseFloat(s):s,t[s],n))}),r};const d=function(t,e,r=!0,a=1){if(s(t)&&s(e)&&t.length!==e.length)return!r;if(i(t)&&i(e)){var h=Object.keys(t),c=Object.keys(e);if(!h.length&&!c.length)return m(t)&&m(e)?r:t===e===r;if(!d(h,c))return!r}if(a>0&&(s(t)&&s(e)||i(t)&&i(e))){var l=function(t,e,r=!0,n=!0,a=!1,h=!1){if(s(t)&&s(e)){var c=[],l=!0;return t.forEach(t=>{if(l){var u=!1;v(e,(e,a)=>{(!u||n&&o(t))&&(u=r(t,a),(s(u)&&!u.length||i(u)&&!Object.keys(u).length)&&(u=!1),o(u)&&n&&(t=u))}),o(u)?c.push(n?u:t):g(u)?a&&!u||!a&&u?c.push(t):h&&(l=!1):c.push(u)}}),c}if(i(t)&&i(e)){c={},l=!0;return Object.keys(t).forEach(u=>{if(l){var p=r(t[u],e[u]);(s(p)&&!p.length||i(p)&&!Object.keys(p).length)&&(p=!1),o(p)?c[u]=n?p:t[u]:g(p)?a&&!p||!a&&p?c[u]=t[u]:h&&(l=!1):c[u]=p}}),c}}(t,e,(t,e)=>d(t,e,r,a-1),!1,!1,!0);return s(l)?l.length===t.length&&l.length===e.length:i(l)&&i(t)?Object.keys(l).length===Object.keys(t).length&&Object.keys(l).length===Object.keys(e).length:l}return n(r)?r(t,e):f(t)&&f(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var x=d,y=class{even(t){return!(!i(t)||t.jsenType!==this.jsenType)&&x(t,this)}inherit(t){return this}withComments(t){return this.meta||(this.meta={}),this.meta.comments=t,this}withVars(t){return this.meta||(this.meta={}),this.meta.vars=t,this}};const b=class extends y{};Object.defineProperty(b.prototype,"jsenType",{get:()=>"Reference"});var w=b;const j=class extends y{};Object.defineProperty(j.prototype,"jsenType",{get:()=>"CallExpression"});var O=j;const k=class{static parse(t,e,r={},n=k){if(r.meta||(r.meta={vars:[]}),t.length){for(var i=Object.values(e||n.grammars),o=0;o<i.length;o++){var a=r.meta&&s(r.meta.vars)?r.meta.vars.length:0,h=i[o].parse(t,(t,e,s={})=>k.parse(t,e,s?l(r,s):r,n));if(h&&(h.meta||(h.meta={}),h.meta.vars=r.meta.vars.slice(a),(p(h,w)||p(h,O))&&(u(h.meta.vars,h.context),u(r.meta.vars,h.context),r.meta.vars.push(h))),h&&s(r.explain)&&r.explain.push(t+" >>-------------\x3e> "+h.jsenType),h)return h}if(!1===r.assert)return;throw new Error("[Syntax error:] "+t)}}};var S=k,E=function(t){return"string"==typeof t},T=function(t){return arguments.length&&(void 0===t||void 0===t)},$=function(t,e=!0){return s(t)?t:!e&&i(t)?[t]:!1!==t&&0!==t&&function(t){return function(t){return null===t||""===t}(t)||T(t)||!1===t||0===t||o(t)&&!Object.keys(t).length}(t)?[]:function(t){return!E(t)&&!T(t.length)}(t)?Array.prototype.slice.call(t):i(t)?Object.values(t):[t]};const C=function(t,e=1,r=!0){return!a(e)||e<=0?t:(!s(t)&&i(t)&&r&&(t=Object.values(t)),s(t)?t.reduce((t,n)=>s(n)||i(n)&&r?t.concat(C(s(n)?n:Object.values(n),e-1,r)):t.concat(n),[]):t)};var P=C,_=function(t,e=1){var r=0;t.forEach(t=>{r++});var s=t.slice(t.length-r,e);return arguments.length>1?s:s[0]},A=function(t,e=1){return arguments.length>1?_(t.slice().reverse(),e).reverse():_(t.slice().reverse())},F=function(t,e=[]){return c([{},t],(t,r,i)=>{if(!n(i[t]))return n(e)?e(t):!s(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)};const W=class{static lex(t,e,r){if(!E(t))throw new Error("Argument1 must be a string!");var s=new W(t,r);return W.$cache[t]=W.$cache[t]||[],W.$cache[t].push(s),s.lex(e)}static split(t,e,r){return W.lex(t,e,r).tokens}static match(t,e,r){return W.lex(t,e,r).matches}constructor(t,e){if(!E(t))throw new Error("Lexer requires the first argument to be a string.");this.$str=t,this.$options=e||{},this.$options.blocks||(this.$options.blocks=W.$blocks),this.$options.quotes||(this.$options.quotes=W.$quotes),this.$options.comments||(this.$options.comments=W.$comments),this.$cache=[]}lex(t,e){var r={delims:$(t),options:l(!0,{},this.$options,e||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(!1!==r.options.cache)for(var s=0;s<this.$cache.length;s++)if(x(this.$cache[s].delims,r.delims)&&x(this.$cache[s].options,r.options))return F(this.$cache[s]);if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+P(r.nesting).join(", "));return!1!==r.options.cache&&this.$cache.push(r),r}_evalCharsAt(t,e){if(!(e>=this.$str.length)){var r=1,s={},n={},i={};if(t.openComment||(n=this._testQuotes(t,e)),t.openQuote||(s=this._testComments(t,e)),t.openComment||s.ending)if(t.nesting.length||i.ending)this._push(t,this.$str[e]);else r=(a=s.starting||s.ending||this.$str[e]).length,this._push(t,a,"comments",s.starting);else if(t.openQuote||n.ending)this._push(t,this.$str[e]);else{if(t.options.limit&&t.matches.length===t.options.limit)return this._push(t,this.$str[e]),this._evalCharsAt(t,e+1);i=this._testNesting(t,e);i=this._testNesting(t,e);var o=this._testChars(t.options.stopChars||[],t,e);if(!t.nesting.length&&!1!==o)return t.options.stopChar=o,void(t.options.stopCharForward=this.$str.substr(e));if(t.delims.length)if(t.nesting.length||i.ending){var a;r=(a=i.starting||i.ending||this.$str[e]).length,this._push(t,a)}else{this._push(t,"");var h=this._testChars(t.delims,t,e);if(!1!==h&&(t.matches.push(h),t.matchesi[e]=h,r=h.length||1,!t.options.preserveDelims))return this._evalCharsAt(t,e+(h.length||1));this._push(t,h||this.$str[e])}else 2===t.nesting.length&&i.starting?(t.matches.push(null),this._push(t,i.starting),r=i.starting.length):!t.nesting.length&&i.ending?(this._push(t,i.ending),r=i.ending.length,t.matches.push(null)):this._push(t,this.$str[e])}return this._evalCharsAt(t,e+r)}}_testQuotes(t,e){var r={};return(t.options.quotes||[]).forEach(s=>{this.$str.substr(e,1)===s&&(t.openQuote?s===t.openQuote&&(t.openQuote=!1,r.ending=s):(t.openQuote=s,r.starting=s))}),r}_testComments(t,e){var r={};return(t.options.comments||[]).forEach(s=>{if(t.openComment){if(A(s)===A(t.openComment)){var n;(n=this.$str.substr(e).match(new RegExp("^"+A(s))))&&(t.openComment=!1,r.ending=n[0])}}else(n=this.$str.substr(e).match(new RegExp("^"+_(s))))&&(t.openComment=s,r.starting=n[0])}),r}_testNesting(t,e){var r={};return(t.options.blocks||[]).forEach(s=>{var n=this.$str.substr(e).match(new RegExp("^"+_(s)));if(n)t.nesting=t.nesting.concat([s]),r.starting=n[0];else if(t.nesting.length&&A(s)===A(A(t.nesting))){var i=this.$str.substr(e).match(new RegExp("^"+A(s)));i&&(t.nesting=t.nesting.slice(0,-1),r.ending=i[0])}}),t.maxDepth=Math.max(t.maxDepth,t.nesting.length),r}_testChars(t,e,r){for(var s=0;s<t.length;s++){var i=t[s];if(n(i)){var o=i(this.$str.substr(0,r),this.$str.substr(r));if(!1!==o)return o}if(e.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+i,!0!==e.options.useRegex?e.options.useRegex:""));if(a)return a[0]}if(!e.options.ci&&this.$str.substr(r,i.length)===i||e.options.ci&&this.$str.substr(r,i.length).toLowerCase()===i.toLowerCase())return i}return!1}_push(t,e,r="tokens",s=!1){var n=t.matches.length;if(T(t.tokens[n])&&(t.tokens[n]=""),"comments"===r){t.tokens[n].comments||(t.tokens[n]=new String(t.tokens[n]),t.tokens[n].comments=[]);var i=t.tokens[n].comments.length-(!t.tokens[n].comments.length||s?0:1);t.tokens[n].comments[i]=(t.tokens[n].comments[i]||"")+e}else{var o=t.tokens[n].comments;t.tokens[n]=new String(t.tokens[n]+e),t.tokens[n].comments=o}}split(t,e,r){return this.lex(e,r).tokens}match(t,e,r){return this.lex(e,r).matches}regParse(t,e){return this.lex(t,l({useRegex:!0},e||{}))}regSplit(t,e){return this.regParse(t,e).tokens}regMatch(t,e){return this.regParse(t,e).matches}};W.$blocks=[["\\(","\\)"],["\\[","\\]"],["\\{","\\}"]],W.$quotes=['"',"'","`"],W.$comments=[["\\/\\*","\\*\\/"],["\\/\\/","(\\r)?\\n"]],W.$cache={};var N=W;class q extends Array{get(t,e={},r=!0){for(var s=0;s<this.length;s++){var i=I(this[s],t,e);if(!T(i)||R(this[s],t,e))return n(i)&&r?i.bind(this[s]):i}}set(t,e,r={}){const s=(t,e,r,s)=>s.set?s.set(t,e,r):(t[e]=r,!0);for(var n=0;n<this.length;n++)if(R(this[n],t,r))return s(this[n],t,e,r);return!(!o(this[0])||!this[0])&&s(this[0],t,e,r)}del(t,e={}){for(var r=0;r<this.length;r++)if(R(this[r],t,e))return e.deleteProperty||e.del?(e.deleteProperty||e.del)(this[r],t):(delete this[r][t],!0)}has(t,e,r={}){for(var s=0;s<this.length;s++)if(R(this[s],t,r)){var n=I(this[s],t,r);return R(n,e,r)}throw new Error('"'+t+'" is undefined!')}exec(t,e,r={}){for(var s=0;s<this.length;s++){var i=I(this[s],t,r);if(!T(i)||R(this[s],t,r)){if(!n(i)){if(r.exec)return r.exec(this[s],t,e);throw new Error('"'+t+'" is not a function! (Called on type: '+typeof this[s]+".)")}return r.apply?r.apply(i,this[s],e):i.apply(this[s],e)}}if(r.execUnknown)return r.execUnknown(this,t,e);throw new Error('"'+t+'" is undefined! (Called on types: '+this.map(t=>typeof t).join(", ")+".)")}static create(t){return t instanceof q?t:t?new q(t):new q}}const I=(t,e,r)=>r.get?r.get(t,e):o(t)&&t||E(t)||f(t)?t[e]:void 0,R=(t,e,r)=>r.has?r.has(t,e):o(t)&&t?e in t:!T(t[e]);var M=function(t,e,r){return t.startsWith(e)&&t.endsWith(r)},D=function(t,e,r){return function(t,e){return function(t,e,r=!1){if(""==e)return t;var s=r?t.lastIndexOf(e):t.indexOf(e);return-1===s?t:t.substr(0,s)}(t,e,!0)}(function(t,e,r=!1){if(""==e)return t;var s=r?t.lastIndexOf(e):t.indexOf(e);return-1===s?"":t.substr(s+e.length)}(t,e),r)};const Q=class extends y{};Object.defineProperty(Q.prototype,"jsenType",{get:()=>"Abstraction"});var U=Q;const B=class extends U{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr.eval(t,e)}toString(t=null){return"("+this.expr.toString(t)+")"}static parse(t,e,r=B){if(M(t,"(",")")&&!N.match(t,[" "]).length)return new r(e(D(t,"(",")")))}};var L=B;const z=class extends y{};Object.defineProperty(z.prototype,"jsenType",{get:()=>"ArrayType"});var J=z;const V=class extends J{constructor(t){super(),this.exprs=t||[]}inherit(t){if(t instanceof J){var e=t.exprs.filter(t=>this.exprs.reduce((e,r)=>e&&!t.even(r),!0));this.exprs=e.concat(this.exprs)}return this}eval(t=null,e={}){return this.exprs.map(r=>r.eval(t,e))}toString(t=null){return"["+this.exprs.map(e=>e.toString(t)).join(", ")+"]"}static parse(t,e,r=V){if(M(t,"[","]")&&!N.match(t.trim(),[" "]).length)return new r(N.split(D(t,"[","]"),[","]).map(t=>t.trim()).filter(t=>t).map(t=>e(t)))}};var G=V;const H=class extends y{};Object.defineProperty(H.prototype,"jsenType",{get:()=>"Arguments"});var K=H;const X=class extends K{constructor(t=[]){super(),this.list=t}eval(t=null,e={}){return this.list.map(r=>r.eval(t,e))}toString(t=null){return"("+this.list.map(e=>e.toString(t)).join(", ")+")"}static parse(t,e,r=X){if(t=t.trim(),M(t,"(",")")&&!N.match(t,[" "]).length)return new r(N.split(D(t,"(",")"),[","]).map(t=>e(t.trim())))}};var Y=X,Z=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)};const tt=class extends y{};Object.defineProperty(tt.prototype,"jsenType",{get:()=>"AssertionExpression"});var et=tt;const rt=class extends et{constructor(t,e){super(),this.exprs=t,this.logic=e}eval(t=null,e={}){if("!"===this.logic)return!_(this.exprs).eval(t,e);P(rt.operators);for(var r=(this.logic||"").trim().toUpperCase(),s=r===(rt.operators.or||"").trim().toUpperCase(),n=r===(rt.operators.nor||"").trim().toUpperCase(),i=r===(rt.operators.and||"").trim().toUpperCase(),o=r===(rt.operators.nand||"").trim().toUpperCase(),a=!0,h=0,c=0;c<this.exprs.length;c++){if(a=this.exprs[c].eval(t,e),i&&!a)return!1;if(o&&!a)return!0;if(s&&a)return a;h+=a?1:0}return s?a:i||o?i:n&&0===h}toString(t=null){return"!"===this.logic?"!"+_(this.exprs).toString(t):this.exprs.map(e=>e.toString(t)).join(" "+this.logic+" ")}static parse(t,e,r=rt){if(t.startsWith("!"))return new r([e(t.substr(1))],"!");var s=N.lex(t,P(r.operators));if(s.tokens.length>1){var n=Z(s.matches);if(n.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+t+"!");return new r(s.tokens.map(t=>e(t.trim())),_(n))}}};rt.operators={and:"&&",or:"||"};var st=rt;const nt=class extends y{};Object.defineProperty(nt.prototype,"jsenType",{get:()=>"AssignmentExpression"});var it=nt;const ot=class extends it{constructor(t,e,r="="){super(),this.reference=t,this.val=e,this.operator=r}eval(t=null,e={}){var r=this.reference.getEval(t,e),s=this.val.eval(t,e);if(!T(r.context)&&!T(r.name))return q.create(r.context).set(r.name,s,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return[this.reference.toString(t),this.operator,this.val.toString(t)].join(" ")}static parse(t,e,r=ot){var s=N.lex(t,r.operators);if(2===s.tokens.length){var n,i;if(!((n=e(s.tokens.shift().trim()))instanceof w&&(i=e(s.tokens.shift().trim()))))throw new Error("Invalid assignment expression: "+t);return new r(n,i,s.matches[0].trim())}}};ot.operators=[" = "];var at=ot;const ht=class extends y{};Object.defineProperty(ht.prototype,"jsenType",{get:()=>"BooleanType"});var ct=ht;const lt=class extends ct{constructor(t){super(),this.state=t}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(t,e,r=lt){if("true"===(t=t.toLowerCase().trim())||"false"===t)return new r(t)}};var ut=lt;const pt=class extends O{constructor(t,e){super(),this.reference=t,this.args=e}eval(t=null,e={}){var r=this.reference.getEval(t,e),s=this.args.eval(t,e);if(!T(r.context)&&!T(r.name))return q.create(r.context).exec(r.name,s,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return this.reference.toString(t)+this.args.toString(t)}static parse(t,e,r=pt){if(!t.startsWith("(")&&t.endsWith(")")&&!N.match(t,[" "]).length){var s,n=N.split(t,[]),i=n.pop();if(!((s=e(n.join("")))instanceof w&&(i=e(i,[Y]))))throw new Error("Invalid call directive: "+t);return new r(s,i)}}};var ft=pt;const mt=class extends y{};Object.defineProperty(mt.prototype,"jsenType",{get:()=>"ComparisonExpression"});var gt=mt;const vt=class extends gt{constructor(t,e,r){super(),this.operand1=t,this.operand2=e,this.operator=r}eval(t=null,e={}){return vt.compare(this.operand1.eval(t,e),this.operand2.eval(t,e),this.operator)}toString(t=null){return[this.operand1.toString(t),this.operator,this.operand2.toString(t)].join(" ")}static parse(t,e,r=vt){var s=P(r.operators).map(t=>" "+t+" "),n=N.lex(t,s);if(n.tokens.length>1){if(n.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+t+"!");return new r(e(_(n.tokens).trim()),e(A(n.tokens).trim()),n.matches[0].trim())}}static compare(t,e,r="=="){if(-1===P(vt.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return t===e;case"==":case"=":return t==e;case">":return t>e;case"<":return t<e;case">=":return t>=e;case"<=":return t<=e;case"!=":return t!=e;case"!==":return t!==e;case"^=":return E(t)&&t.startsWith(e);case"$=":return E(t)&&t.endsWith(e);case"*=":return!(!s(e)&&!E(e))&&t.indexOf(e)>-1;case"~=":return E(t)&&E(e)&&(" "+t+" ").indexOf(" "+e+" ")>-1;case">=<":if(!s(e)||2!==e.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return t>=e[0]&&t<=e[1];case"/**/":return e.match(new RegExp(t));default:return!1}}static diff(t,e,r){return!vt.compare(t,e,r?"===":"==")}};vt.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var dt=vt;const xt=class extends y{};Object.defineProperty(xt.prototype,"jsenType",{get:()=>"TernaryConditional"});var yt=xt;const bt=class extends yt{constructor(t,e,r){super(),this.assertion=t,this.onTrue=e,this.onFalse=r}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue.eval(t,e):this.onFalse.eval(t,e)}toString(t=null){return[this.assertion.toString(t),bt.operators[0],this.onTrue.toString(t),bt.operators[1],this.onFalse.toString(t)].join(" ")}static parse(t,e,r=bt){var s=N.split(t,r.operators);if(s.length>1){if(2===s.length)throw new Error("Malformed ternary expression: "+t+"!");return new r(e(s[0].trim()),e(s[1].trim()),e(s[2].trim()))}}};bt.operators=["?",":"];var wt=bt;const jt=class extends y{};Object.defineProperty(jt.prototype,"jsenType",{get:()=>"DeleteExpression"});var Ot=jt;const kt=class extends Ot{constructor(t,e="delete"){super(),this.reference=t,this.operator=e}eval(t=null,e={}){var r=this.reference.getEval(t,e);if(!T(r.context)&&!T(r.name))return q.create(r.context).del(r.name,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return this.operator+" "+this.reference.toString(t)}static parse(t,e,r=kt){var s=N.lex(t,Object.values(r.operators));if(1===s.matches.length&&t.startsWith(s.matches[0]+" ")){var n;if(!((n=e(s.tokens.pop().trim()))instanceof w))throw new Error("Invalid delete directive: "+t);return new r(n,s.matches[0].trim())}}};kt.operators={red:"reduce",del:"delete"};var St=kt;const Et=class extends y{};Object.defineProperty(Et.prototype,"jsenType",{get:()=>"FunctionType"});var Tt=Et;const $t=class extends y{};Object.defineProperty($t.prototype,"jsenType",{get:()=>"Statements"});var Ct=$t;const Pt=class extends y{};Object.defineProperty(Pt.prototype,"jsenType",{get:()=>"ReturnDirective"});var _t=Pt;const At=class extends Ct{constructor(t,e){super(),this.stmts=t||[],this.delim=e}eval(t=null,e={}){for(var r=[],s=0;s<this.stmts.length;s++){if(this.stmts[s]instanceof _t)return this.stmts[s].eval(t,e);r[s]=this.stmts[s].eval(t,e)}return r}toString(t=null){return this.stmts.map(e=>e.toString(t)).join(this.delim)}static parse(t,e,r=At){var s=N.lex(t,P(r.operators).concat([(t,e)=>!(!t.endsWith("}")||e.trim().startsWith("else"))&&""]));if(s.matches.length)return new r(s.tokens.map(t=>e(t.trim())).filter(t=>t),s.matches[0].trim())}};At.operators=[";","\r\n"];var Ft=At;const Wt=class extends Tt{constructor(t,e,r={}){super(),this.paramters=t||{},this.statements=e,this.arrowFunctionFormatting=r}inherit(t){if(t instanceof Tt){for(var e=Object.keys(t.paramters),r=Object.keys(this.paramters),s=0;s<Math.max(r.length,e.length);s++){var n=e[s],i=r[s];if(!i&&n)throw new Error("Parameter #"+s+" ("+n+") in parent function must be implemented.");if(i&&n){var o=t.paramters[n],a=this.paramters[i];if(a&&!o)throw new Error("Parameter #"+s+" ("+i+") must not have a default value as established in parent function.");if(a&&o&&a.jsenType!==o.jsenType)throw new Error("Default value for parameter #"+s+" ("+i+") must be of type "+o.jsenType+" as established in parent function.")}}this.sup=t}return this}eval(t=null,e={}){return(...r)=>{var s={};v(Object.keys(this.paramters),(n,i)=>{var o=this.paramters[i];if(r.length-1<n&&!o)throw new Error('The parameter "'+i+'" is required.');s[i]=r.length>n?r[n]:this.paramters[i]?this.paramters[i].eval(t,e):null});var n=q.create(s).concat(q.create(t));return this.statements.eval(n,e)}}toString(t=null){var e=[];if(v(this.paramters,(r,s)=>{e.push(r+(s?"="+s.toString(t):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===e.length&&-1===e[0].indexOf("="),s=!1===this.arrowFunctionFormatting.body;return(r?e[0]:"("+e.join(", ")+")")+" => "+(s?this.statements.toString(t):"{"+this.statements.toString(t)+"}")}return"function ("+e.join(", ")+") {"+this.statements.toString(t)+"}"}static parse(t,e,r=Wt){var s;if((t=t.trim()).startsWith("function")&&(s=N.split(t,[]).slice(1).filter(t=>t.trim()))&&2===s.length)var n=!1,i=D(s.shift().trim(),"(",")"),o=D(s.shift().trim(),"{","}");else{if(t.startsWith("function")||!(s=N.split(t,["=>"]))||2!==s.length)return;i=s.shift().trim(),o=s.shift().trim(),n={};M(i,"(",")")?i=D(i,"(",")"):n.head=!1,M(o,"{","}")?o=D(o,"{","}"):n.body=!1}var a={};N.split(i,[","]).forEach(t=>{var r=t.split("=");r[1]?a[r[0].trim()]=e(r[1].trim()):a[t.trim()]=null});var h=e(o,[Ft],{assert:!1})||e(o);return new r(a,h,n)}};Wt.operators=["=>"];var Nt=Wt;const qt=class extends y{};Object.defineProperty(qt.prototype,"jsenType",{get:()=>"IfConditional"});var It=qt;const Rt=class extends It{constructor(t,e,r,s={}){super(),this.assertion=t,this.onTrue=e,this.onFalse=r,this.params=s}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue.eval(t,e):this.onFalse?this.onFalse.eval(t,e):void 0}toString(t=null){var e=this.params.onTrueIsBlock?"{"+this.onTrue.toString(t)+"}":this.onTrue.toString(t),r=this.params.onFalseIsBlock?"{"+this.onFalse.toString(t)+"}":this.onFalse?this.onFalse.toString(t):"";return"if ("+this.assertion.toString(t)+")"+e+(r?" else "+r:"")}static parse(t,e,r=Rt){var s;if((t=t.trim()).startsWith("if")&&(s=N.split(t,[],{limit:2}).slice(1).filter(t=>t.trim()))&&2===s.length){var n,i,o=e(D(s.shift().trim(),"(",")").trim()),a=N.split(s.shift().trim(),["else"],{limit:1}),h=a.shift().trim(),c=(a.shift()||"").trim();return M(h,"{","}")?(n=!0,h=e(h=D(h,"{","}").trim(),[Ft],{assert:!1})||e(h)):h=e(h),c&&(M(c,"{","}")?(i=!0,c=e(c=D(c,"{","}").trim(),[Ft],{assert:!1})||e(c)):c=e(c)),new r(o,h,c,{onTrueIsBlock:n,onFalseIsBlock:i})}}};var Mt=Rt,Dt=function(t,e,r=null){return s(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]};const Qt=class extends y{};Object.defineProperty(Qt.prototype,"jsenType",{get:()=>"MathExpression"});var Ut=Qt;const Bt=class extends Ut{constructor(t,e){super(),this.val=t,this.exprs=e}eval(t=null,e={}){return this.exprs.reduce((r,s)=>{var n=s.val.eval(t,e),i=s.operator.trim();if(!(a(r)&&a(n)||"+"===i))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(i){case"+":return r+n;case"-":return r-n;case"*":return r*n;case"/":return r/n}},this.val.eval(t,e))}toString(t=null){return[this.val.toString(t)].concat(this.exprs.map(e=>e.operator+" "+e.val.toString(t))).join(" ")}static parse(t,e,r=Bt){var s=N.lex(t,P(r.operators));if(s.tokens.length>1&&s.matches.length===s.tokens.length-1){var n=Z(s.matches);if(Dt(n,Bt.operators.sup).length&&Dt(n,Bt.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+t+"!");return new r(e(s.tokens.shift().trim()),s.tokens.map((t,r)=>({operator:s.matches[r],val:e(t.trim())})))}}};Bt.operators={sup:["*","/"],sub:[" + "," - "]};var Lt=Bt;const zt=class extends y{};Object.defineProperty(zt.prototype,"jsenType",{get:()=>"NumberType"});var Jt=zt;const Vt=class extends Jt{constructor(t,e=0){super(),this.int=t,this.dec=e}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(t=null){return this.int+(this.dec?"."+this.dec:null)}static parse(t,e,r=Vt){if(a(t)){t=t.split(".");return new r(parseInt(t.shift()),parseInt(t.shift()))}}};var Gt=Vt;const Ht=class extends y{};Object.defineProperty(Ht.prototype,"jsenType",{get:()=>"ObjectType"});var Kt=Ht;const Xt=class extends Kt{constructor(t){super(),this.entries=t||{}}inherit(t){return t instanceof Kt&&v(t.entries,(t,e)=>{t in this.entries||(this.entries[t]=e)}),this}eval(t=null,e={}){var r={};return v(this.entries,(s,n)=>{r[s]=n.eval(t,e)}),r}toString(t=null){var e=[];return v(this.entries,(r,s)=>{e.push(r+Xt.operators.sub+s.toString(t))}),"{"+e.join(Xt.operators.sup)+"}"}static parse(t,e,r=Xt){if(M(t,"{","}")&&!N.match(t.trim(),[" "]).length){var s={},n=N.split(D(t,"{","}"),[Xt.operators.sup]).map(t=>t.trim()).filter(t=>t);return v(n,(t,r)=>{var n=N.split(r,[Xt.operators.sub],{limit:1});s[_(n).trim()]=e(A(n).trim())}),new r(s)}}};Xt.operators={sup:",",sub:":"};var Yt=Xt;const Zt=class extends y{};Object.defineProperty(Zt.prototype,"jsenType",{get:()=>"PresenceOperator"});var te=Zt;const ee=class extends te{constructor(t,e,r="in"){super(),this.prop=t,this.reference=e,this.operator=r}eval(t=null,e={}){var r=this.reference.getEval(t,e),s=this.prop.eval(t,e);if(!T(r.context)&&!T(r.name))return q.create(r.context).has(r.name,s,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return[this.prop.toString(t),this.operator,this.reference.toString(t)].join(" ")}static parse(t,e,r=ee){var s=N.lex(t,r.operators);if(2===s.tokens.length){var n,i;if(!((n=e(s.tokens.shift().trim()))&&(i=e(s.tokens.shift().trim()))instanceof w))throw new Error("Invalid presence check expression: "+t);return new r(n,i,s.matches[0].trim())}}};ee.operators=[" in "];var re=ee;const se=class extends w{constructor(t,e,r=!1){super(),this.context=t,this.name=e,this.backticks=r}getEval(t=null,e={}){var r=t,s=this.name;return this.context&&(s instanceof y&&(s=s.eval(t,e)),r=this.context.eval(t,e)),{context:r,name:s}}eval(t=null,e={}){var r=this.getEval(t,e);if(!T(r.context)&&!T(r.name))return q.create(r.context).get(r.name,e)}toString(t=null){var e=this.name;if(this.context){var r=this.context.toString(t);e instanceof y?e="["+e.toString(t)+"]":this.backticks&&(e="`"+e+"`")}else{r=t;this.backticks&&(e="`"+e+"`")}return(r||"")+(r&&!e.startsWith("[")?se.separator:"")+e}static parse(t,e,r=se){if(!N.match(t.trim(),[" "]).length){var s,n,i=N.split(t,[]),o=i.pop(),a=N.split(o.trim(),[r.separator],{preserveDelims:!0});if(a.length>1&&(o=a.pop().substr(1),i=i.concat(a)),M(o,"`","`")&&(o=D(o,"`","`"),n=!0),i.length&&((s=e(i.join(""))).isContext=!0),M(o,"[","]")){if(!s)throw new Error("Invalid reference: "+t+"!");o=e(D(o,"[","]"))}return new r(s,o,n)}}};se.separator=".";var ne=se;const ie=class extends _t{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr?this.expr.eval(t,e):void 0}toString(t=null){return this.expr?"return "+this.expr.toString(t):"return"}static parse(t,e,r=ie){var s=t.toLowerCase();if(s.startsWith("return ")||"return"===s)return new r(e(t.substr(6).trim()))}};var oe=ie;const ae=class extends y{};Object.defineProperty(ae.prototype,"jsenType",{get:()=>"StringType"});var he=ae;const ce=class extends he{constructor(t,e){super(),this.expr=t,this.quote=e}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(t,e,r=ce){if(t=t.trim(),(M(t,'"','"')||M(t,"'","'"))&&!N.match(t,[" "]).length){var s=M(t,'"','"')?'"':"'";return new r(D(t,s,s),s)}}};var le=ce;S.grammars={If:Mt,Return:oe,Deletion:St,Assignment:at,Presence:re,Func:Nt,Abstraction:L,Condition:wt,Assertion:st,Comparison:dt,Math:Lt,Arr:G,Obj:Yt,Num:Gt,Str:le,Bool:ut,Call:ft,Reference:ne};var ue=S;window.WebNative||(window.WebNative={}),window.WebNative.Jsen=ue}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,